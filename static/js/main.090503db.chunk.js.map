{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","predictions","event","_this2","target","files","reader","FileReader","onload","e","setState","image","result","readAsDataURL","_this3","img","document","getElementById","mobilenet","then","model","classify","react_default","a","createElement","Fragment","className","href","type","id","onChange","onImageChange","bind","src","style","maxWidth","height","alt","onClick","predictImage","map","prediction","index","key","probability","toFixed","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kQA0GeA,cAjGX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACC,YAAa,IAFZR,6EAKLS,GAAO,IAAAC,EAAAP,KACjB,GAAIM,EAAME,OAAOC,OAASH,EAAME,OAAOC,MAAM,GAAI,CAC7C,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAACC,GACbN,EAAKO,SAAS,CAACC,MAAOF,EAAEL,OAAOQ,UAEnCN,EAAOO,cAAcX,EAAME,OAAOC,MAAM,0CAInCH,GAAM,IAAAY,EAAAlB,KACf,GAAIA,KAAKI,MAAMW,MAAO,CAClB,IAAMI,EAAMC,SAASC,eAAe,UAGpCC,MAAiBC,KAAK,SAAAC,GAElBA,EAAMC,SAASN,GAAKI,KAAK,SAAAlB,GACrBa,EAAKJ,SAAS,CAACT,YAAaA,0CAWxC,OACIqB,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,8BACXJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,eAAeC,KAAK,KAAjC,sBAGRL,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACXJ,EAAAC,EAAAC,cAAA,SAAOE,UAAU,qBAAjB,cAEIJ,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOF,UAAU,oBAAoBG,GAAG,aAAaC,SAAUlC,KAAKmC,cAAcC,KAAKpC,WAK3GA,KAAKI,MAAMW,OACXW,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACXJ,EAAAC,EAAAC,cAAA,OAAKK,GAAG,SAASI,IAAKrC,KAAKI,MAAMW,MAAOuB,MAzBlD,CACdC,SAAU,OACVC,OAAQ,QAuB0EC,IAAI,eAGtEf,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mCACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wBACXJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,kBAAkBY,QAAS1C,KAAK2C,aAAaP,KAAKpC,OAApE,cAKhB0B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACXJ,EAAAC,EAAAC,cAAA,SAAOE,UAAU,wBACbJ,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,wBAGAF,EAAAC,EAAAC,cAAA,mBAGAF,EAAAC,EAAAC,cAAA,0BAKA5B,KAAKI,MAAMC,YAAYuC,IAAI,SAAUC,EAAYC,GAC7C,OAAOpB,EAAAC,EAAAC,cAAA,MAAImB,IAAKD,GACZpB,EAAAC,EAAAC,cAAA,UAAKkB,EAAQ,GACbpB,EAAAC,EAAAC,cAAA,UAAKiB,EAAWf,WAChBJ,EAAAC,EAAAC,cAAA,UAAKiB,EAAWG,YAAYC,QAAQ,mBAtF9DC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kECXNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAAStC,SAASC,eAAe,SD0H3C,kBAAmBsC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC","file":"static/js/main.090503db.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n// import * as tf from '@tensorflow/tfjs';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\n\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {predictions: []};\n    }\n\n    onImageChange(event) {\n        if (event.target.files && event.target.files[0]) {\n            let reader = new FileReader();\n            reader.onload = (e) => {\n                this.setState({image: e.target.result});\n            };\n            reader.readAsDataURL(event.target.files[0]);\n        }\n    }\n\n    predictImage(event){\n        if (this.state.image) {\n            const img = document.getElementById('target');\n\n            // Load the model.\n            mobilenet.load().then(model => {\n                // Classify the image.\n                model.classify(img).then(predictions => {\n                    this.setState({predictions: predictions});\n                });\n            });\n        }\n    }\n\n    render() {\n        const img_style = {\n            maxWidth: '100%',\n            height: 'auto'\n        };\n        return (\n            <React.Fragment>\n                <div className=\"container-fluid\">\n                    <nav className=\"navbar navbar-dark bg-dark\">\n                        <a className=\"navbar-brand\" href=\"#\">TF-JS Visualiser</a>\n                    </nav>\n                </div>\n                <div className=\"container\">\n                    <div className=\"row mb-3\">\n                        <div className=\"custom-file\">\n                            <label className=\"custom-file-label\">\n                                Choose File\n                                <input type=\"file\" className=\"custom-file-input\" id=\"customFile\" onChange={this.onImageChange.bind(this)}/>\n                            </label>\n                        </div>\n                    </div>\n                    {\n                        this.state.image &&\n                        <React.Fragment>\n                            <div className=\"row mb-3\">\n                                <div className=\"col-6 offset-3\">\n                                    <img id=\"target\" src={this.state.image} style={img_style} alt=\"Uploaded\"/>\n                                </div>\n                            </div>\n                            <div className=\"row mb-3 justify-content-center\">\n                                <div className=\"col-xs-4 offset-xs-4\">\n                                    <button className=\"btn btn-primary\" onClick={this.predictImage.bind(this)}>Predict</button>\n                                </div>\n                            </div>\n                        </React.Fragment>\n                    }\n                    <div className=\"row mb-6\">\n                        <table className=\"table table-bordered\">\n                            <tbody>\n                                <tr>\n                                    <th>\n                                        Class Rank\n                                    </th>\n                                    <th>\n                                        Class\n                                    </th>\n                                    <th>\n                                        Probability\n                                    </th>\n                                </tr>\n                                {\n                                    this.state.predictions.map(function (prediction, index) {\n                                        return <tr key={index}>\n                                            <td>{index + 1}</td>\n                                            <td>{prediction.className}</td>\n                                            <td>{prediction.probability.toFixed(2)}</td>\n                                        </tr>\n                                    })\n                                }\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}